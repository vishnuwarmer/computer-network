#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <unistd.h>

#define MAX_BUFFER_SIZE 1024
#define SERVER_IP "127.0.0.1"
#define SERVER_PORT 8080

int main() {
    int client_socket;
    struct sockaddr_in server_address;
    char buffer[MAX_BUFFER_SIZE];
    int bytes_received, bytes_sent;

    // Create client socket
    client_socket = socket(AF_INET, SOCK_STREAM, 0);
    if (client_socket < 0) {
        perror("Failed to create socket");
        exit(EXIT_FAILURE);
    }

    // Set server address and port
    server_address.sin_family = AF_INET;
    server_address.sin_addr.s_addr = inet_addr(SERVER_IP);
    server_address.sin_port = htons(SERVER_PORT);

    // Connect to the server
    if (connect(client_socket, (struct sockaddr*)&server_address, sizeof(server_address)) < 0) {
        perror("Failed to connect to the server");
        close(client_socket);
        exit(EXIT_FAILURE);
    }

    // Send a message to the server (example)
    snprintf(buffer, sizeof(buffer), "Hello, Server!");
    bytes_sent = send(client_socket, buffer, strlen(buffer), 0);
    if (bytes_sent < 0) {
        perror("Failed to send message");
        close(client_socket);
        exit(EXIT_FAILURE);
    }

    // Receive a response from the server
    bytes_received = recv(client_socket, buffer, sizeof(buffer) - 1, 0);
    if (bytes_received < 0) {
        perror("Failed to receive message");
        close(client_socket);
        exit(EXIT_FAILURE);
    }

    buffer[bytes_received] = '\0'; // Null-terminate the received data
    printf("Received from server: %s\n", buffer);

    // Close the socket
    close(client_socket);

    return 0;
}

output:
Failed to connect to the server: Connection refused